plugins {
    id "com.android.library"
    id "org.jetbrains.kotlin.android"
    id "kotlin-kapt"
    id "kotlin-parcelize"
    id "dagger.hilt.android.plugin"
}

android {
    namespace rootProject.namespace_network
    compileSdk rootProject.compile_sdk_version

    defaultConfig {
        minSdk rootProject.min_sdk_version
        targetSdk rootProject.compile_sdk_version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    buildFeatures {
        buildConfig true
        compose = true
    }
    compileOptions {
        sourceCompatibility rootProject.java_version
        targetCompatibility rootProject.java_version
    }
    composeOptions {
        kotlinCompilerExtensionVersion rootProject.kotlin_compiler_extension_version
    }

    flavorDimensions = ["environment"]
    productFlavors {
        dev {
            isDefault true
            buildConfigField("String", "BASE_URL", '"https://api.locstock.dev.intelin.vn/"')
            dimension "environment"
        }
        stagging {
            buildConfigField("String", "BASE_URL", '"https://api.locstock.stagging.intelin.vn/"')
            dimension "environment"
        }
        production {
            buildConfigField("String", "BASE_URL", '"https://api.locstock.intelin.vn/"')
            dimension "environment"
        }
    }
    kotlinOptions {
        jvmTarget = rootProject.jvm_target_version
    }
}
dependencies {
    
    // Gson
    implementation "com.google.code.gson:gson:${rootProject.gson_version}"

    // Timer
    implementation "com.jakewharton.timber:timber:${rootProject.timber_version}"

    // Hilt
    def hilt_version = rootProject.hilt_version
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    // Kotlin Coroutines
    def coroutines_android_version = rootProject.kotlinx_coroutines_core_version
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_android_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_android_version"
    implementation "androidx.hilt:hilt-navigation-compose:${rootProject.hilt_navigation_compose_version}"

    // Lifecycle
    def lifecycle_version = rootProject.lifecycle_version
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:${rootProject.lifecycle_extensions_version}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:${rootProject.lifecycle_runtime_ktx_version}"

    // Retrofit
    def retrofit_version = rootProject.retrofit_version
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.logging_interceptor_version}"

    //Default
    implementation "androidx.core:core-ktx:${rootProject.core_ktx_version}"
    implementation "androidx.appcompat:appcompat:${rootProject.appcompat_version}"
    implementation "com.google.android.material:material:${rootProject.material_version}"
    testImplementation "junit:junit:${rootProject.junit_version}"
    androidTestImplementation "androidx.test.ext:junit:${rootProject.test_ext_version}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.espresso_core_version}"

    implementation(project(":core-library"))
}